library(dplyr)
library(purrr)
# set up data frame
family <- data.frame(row.names = c("Dave","Hank","Krista","Shane","Tyler","Danielle"),
group = c("A","A","K","K","K","K"),
teams = (c(1,1,1,2,2,2) %>% sample %>% print))
View(family)
family <- group_by(family, group)
table(family)
install.packages("arules")
library(arules)
library(datasets)
data(Groceries)
data(Groceries)
inspect(Groceries[1:5])
intemFrequency(Groceries[,1:3])
itemFrequency(Groceries[,1:3])
itemFrequencyPlot(Groceries, support =0.1)
itemFrequencyPlot(Groceries, topN = 20)
image(sample(Groceries,100))
myrules <- apriori(data=Groceries, parameter = list(support = 0.1, confidence= 0.8, minlen = 1))
myrules
myrules2 <- apriori(data=Groceries, parameter = list(support = 0.01, confidence= 0.25, minlen = 1))
myrules2
summary(groceryrules)
summary(myrules2)
inspect(myrules2[1:3])
inspect(sort(myrules2, by = "lift")[1:5])
inspect(myrules2[1:10])
berryrules <- subset(myrules2, items %in% "berries")
inspect(berryrules)
frozen <- subset(myrules2, items %in% "frozenmeals")
frozen <- subset(myrules2, items %in% "frozenmeal")
frozen <- subset(myrules2, items %in% "frozen meals")
inspect(frozen)
Groceries@itemInfo
install.packages("e1071")
install.packages("mlbench")
library(e1071)
library(mlbench)
data(HouseVotes84, package = "mlbench")
View(HouseVotes84)
head(HouseVotes84, 5)
str(HouseVotes84)
table(HouseVotes84$Class)
HouseVotes84$Class <- factor(HouseVotes84$Class)
str(HouseVotes84$Class)
plot(as.factor(HouseVotes84[,7]))
title(main="Total Vote cast for issue 6", xlab="vote", ylab="# reps")
plot(as.factor(HouseVotes84[HouseVotes84$Class=='republican', 7]))
title(main='Republican votes cast for issue 6', xlab='vote', ylab='#reps')
plot(as.factor(HouseVotes84[HouseVotes84$Class=='democrat', 7]))
title(main='Democrat votes cast for issue 6', xlab='vote', ylab='#reps')
na_by_col_class <- function (col,cls){return(sum(is.na(HouseVotes84[,col]) & HouseVotes84$Class==cls))}
p_y_col_class <- function(col,cls){
sum_y<-sum(HouseVotes84[,col]=="y" & HouseVotes84$Class==cls,na.rm = TRUE)
sum_n<-sum(HouseVotes84[,col]=="n" & HouseVotes84$Class==cls,na.rm = TRUE)
return(sum_y/(sum_y+sum_n))}
p_y_col_class(7,"democrat")
p_y_col_class(7,"republican")
na_by_col_class(7,"democrat")
na_by_col_class(7,"republican")
for (i in 2:ncol(HouseVotes84)) {
if(sum(is.na(HouseVotes84[,i])>0)) {
c1 <- which(is.na(HouseVotes84[,i])& HouseVotes84$Class=="democrat",arr.ind = TRUE)
c2 <- which(is.na(HouseVotes84[,i])& HouseVotes84$Class=="republican",arr.ind = TRUE)
HouseVotes84[c1,i] <-
ifelse(runif(na_by_col_class(i,"democrat"))<p_y_col_class(i,"democrat"),"y","n")
HouseVotes84[c2,i] <-
ifelse(runif(na_by_col_class(i,"republican"))<p_y_col_class(i,"republican"),"y","n")}
}
which(is.na(HouseVotes84[,i])& HouseVotes84$Class=="democrat",arr.ind = TRUE)
which(is.na(HouseVotes84[,1])& HouseVotes84$Class=="democrat",arr.ind = TRUE)
which(is.na(HouseVotes84[,2])& HouseVotes84$Class=="democrat",arr.ind = TRUE)
which(is.na(HouseVotes84[,3])& HouseVotes84$Class=="democrat",arr.ind = TRUE)
which(is.na(HouseVotes84[,4])& HouseVotes84$Class=="democrat",arr.ind = TRUE)
which(is.na(HouseVotes84[,5])& HouseVotes84$Class=="democrat",arr.ind = TRUE)
View(HouseVotes84)
data(HouseVotes84, package = "mlbench")
HouseVotes84$Class <- factor(HouseVotes84$Class)
str(HouseVotes84$Class)
which(is.na(HouseVotes84[,4])& HouseVotes84$Class=="democrat",arr.ind = TRUE)
for (i in 2:ncol(HouseVotes84)) {
if(sum(is.na(HouseVotes84[,i])>0)) {
c1 <- which(is.na(HouseVotes84[,i])& HouseVotes84$Class=="democrat",arr.ind = TRUE)
c2 <- which(is.na(HouseVotes84[,i])& HouseVotes84$Class=="republican",arr.ind = TRUE)
HouseVotes84[c1,i] <-
ifelse(runif(na_by_col_class(i,"democrat"))<p_y_col_class(i,"democrat"),"y","n")
HouseVotes84[c2,i] <-
ifelse(runif(na_by_col_class(i,"republican"))<p_y_col_class(i,"republican"),"y","n")}
}
HouseVotes84[ ,'train'] <- ifelse(runif(nrow(HouseVotes84))<0.80,1,0)
trainColNum <- grep('train',names(HouseVotes84))
trainHouseVotes84 <- HouseVotes84[HouseVotes84$train==1,-trainColNum]
testHouseVotes84 <- HouseVotes84[HouseVotes84$train==0,-trainColNum]
nb_model <- naiveBayes(Class~.,data = trainHouseVotes84)
nb_model
summary(nb_model)
nb_test_predict <- predict(nb_model,testHouseVotes84[,-1])
table(pred=nb_test_predict,true=testHouseVotes84$Class)
mean(nb_test_predict==testHouseVotes84$Class)
nb_multiple_runs <- function(train_fraction,n){
fraction_correct <- rep(NA,n)
for (i in 1:n){
HouseVotes84[,'train'] <- ifelse(runif(nrow(HouseVotes84))<train_fraction,1,0)
trainColNum <- grep('train',names(HouseVotes84))
trainHouseVotes84 <- HouseVotes84[HouseVotes84$train==1,-trainColNum]
testHouseVotes84 <- HouseVotes84[HouseVotes84$train==0,-trainColNum]
nb_model <- naiveBayes(Class~.,data = trainHouseVotes84)
nb_test_predict <- predict(nb_model,testHouseVotes84[,-1])
fraction_correct[i] <- mean(nb_test_predict==testHouseVotes84$Class)
}
return(fraction_correct)
}
fraction_correct_predictions <- nb_multiple_runs(0.8,20)
fraction_correct_predictions
summary(fraction_correct_predictions)
sd(fraction_correct_predictions)
---
title: "R_Mapping_Exercise"
author: "Tyler Hutcherson"
date: "February 20, 2017"
output: html_document
---
# Data Literacy for Public Good
## R Workshop: Mapping Census Data
In today's workshop, you will learn how to use R statistical computing software to grab census data, make some exploratory plots, and then create a neat interactive map.  The tools you will need are pretty straightforward and easy to use.
To begin, we must install R and RStudio:
* Download [R](http://cran.us.r-project.org/bin/macosx/)
* Install R. Leave all default settings in the installation options.
* Download [RStudio](http://rstudio.org/download/desktop) **the free version** and install it using the supported links depending on your OS. Leave all default settings in the installation options.
seq(1,10,1)
library(acs)
library(tigris)
library(stringr)
geo<-geo.make(state=c("NY"),
county=c(5, 47, 61, 81, 85), tract="*")
income<-acs.fetch(endyear = 2015, span = 5, geography = geo,
table.number = "B19001", col.names = "pretty")
names(attributes(income))
attr(income, "acs.colnames")
income_df <- data.frame(paste0(str_pad(income@geography$state, 2, "left", pad="0"),
str_pad(income@geography$county, 3, "left", pad="0"),
str_pad(income@geography$tract, 6, "left", pad="0")),
income@estimate[,c("Household Income: Total:",
"Household Income: $200,000 or more")],
stringsAsFactors = FALSE)
income_df <- data.frame(paste0(str_pad(income@geography$state, 2, "left", pad="0"),
str_pad(income@geography$county, 3, "left", pad="0"),
str_pad(income@geography$tract, 6, "left", pad="0")),
income@estimate[,c("Household Income: Total:","Household Income: $200,000 or more")],
stringsAsFactors = FALSE)
income@estimate[,c("Household Income: Total:","Household Income: $200,000 or more")]
income@estimate
income_df <- data.frame(paste0(str_pad(income@geography$state, 2, "left", pad="0"),
str_pad(income@geography$county, 3, "left", pad="0"),
str_pad(income@geography$tract, 6, "left", pad="0")),
income@estimate[,c("Household Income in the Past 12 Months (in 2015 Inflation-Adjusted Dollars): Total:","Household Income in the Past 12 Months (in 2015 Inflation-Adjusted Dollars): $200,000 or more")],
stringsAsFactors = FALSE)
attr(income, "acs.colnames")
income_df <- data.frame(paste0(str_pad(income@geography$state, 2, "left", pad="0"),
str_pad(income@geography$county, 3, "left", pad="0"),
str_pad(income@geography$tract, 6, "left", pad="0")),
income@estimate[,c("B19001. Household Income in the Past 12 Months (in 2015 Inflation-Adjusted Dollars): Total:","B19001. Household Income in the Past 12 Months (in 2015 Inflation-Adjusted Dollars): $200,000 or more")],
stringsAsFactors = FALSE)
View(income_df)
income_df <- select(income_df, 1:3)
rownames(income_df)<-1:nrow(income_df)
names(income_df)<-c("GEOID", "total", "over_200")
income_df$percent <- 100*(income_df$over_200/income_df$total)
View(income_df)
income_df <- data.frame(paste0(str_pad(income@geography$state, 2, "left", pad="0"),
str_pad(income@geography$county, 3, "left", pad="0"),
str_pad(income@geography$tract, 6, "left", pad="0")),
income@estimate[,c("B19001. Household Income in the Past 12 Months (in 2015 Inflation-Adjusted Dollars): Total:","B19001. Household Income in the Past 12 Months (in 2015 Inflation-Adjusted Dollars): $200,000 or more")],
stringsAsFactors = FALSE)
View(income_df)
geo.lookup(state="VA", county="Charlottesville")
geo<-geo.make(state=c("VA"),
county=c(540), tract="*")
income<-acs.fetch(endyear = 2016, span = 5, geography = geo,
table.number = "B19001", col.names = "pretty")
income<-acs.fetch(endyear = 2015, span = 5, geography = geo,
table.number = "B19001", col.names = "pretty")
names(attributes(income))
attr(income, "acs.colnames")
install.packages("bnlearn")
library(bnlearn)
data("coronary")
head(coronary)
bn_df <- data.frame(coronary)
View(coronary)
View(bn_df)
res <- hc(bn_df)
plot(res)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")),]
plot(res)
res <- set.arc(res, from = "Family", to = "Pressure")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
print(fittedbn$Proteins)
print(fittedbn$M..Work)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no" & Pressure==">140" ) )
cpquery(fittedbn, event = (Pressure==">140"), evidence = ( Proteins=="<3" ) )
library(leaflet)
install.packages("leaflet")
library(leaflet)
library(acs)
library(stringr)
library(tigris)
library(dplyr)
library(ggplot2)
library(leaflet)
geo<-geo.make(state=c("VA"), county="540", tract="*")
geo<-geo.make(state=c("VA"), county=c(540), tract="*")
income<-acs.fetch(endyear = 2015, span = 5, geography = geo, table.number = "B19001", col.names = "pretty")
income_df <- data.frame(paste0(str_pad(income@geography$state, 2, "left", pad="0"), #pads zeros, to the "left", 2 total
str_pad(income@geography$county, 3, "left", pad="0"),
str_pad(income@geography$tract, 6, "left", pad="0")),
income@estimate[,c("B19001. Household Income in the Past 12 Months (in 2015 Inflation-Adjusted Dollars): Total:","B19001. Household Income in the Past 12 Months (in 2015 Inflation-Adjusted Dollars): $200,000 or more")],
stringsAsFactors = FALSE)
rownames(income_df)<-1:nrow(income_df)  #sets the row names to 1,2,3......,n
names(income_df)<-c("GEOID", "Total", "Over_200")  #sets the column names
income_df$Percent <- 100*(income_df$over_200/income_df$total)  #creates a new variable
income_df$Percent <- 100*(income_df$Over_200/income_df$Total)  #creates a new variable
tracts <- tracts(state = 'VA', county = "540", cb=TRUE)
income_merged<- geo_join(tracts, income_df, "GEOID", "GEOID") #merges the acs data and spatial boundary data by `GEOID`
income_merged <- income_merged[income_merged$ALAND>0,] #filter out observations where the land area is 0 (uses similar notation to line 63)
popup <- paste0("GEOID: ", income_merged$GEOID, "<br>", "Percent of Households above $200k: ", round(income_merged$percent,2))
popup <- paste0("GEOID: ", income_merged$GEOID, "<br>", "Percent of Households above $200k: ", round(income_merged$Percent,2))
pal <- colorNumeric(
palette = "YlGnBu",
domain = income_merged$Percent
)
map<-leaflet() %>% #this is a pipe operator - saves space by putting the previous element into the first slot of the next argument
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = income_merged, #use the name of the final merged data frame
fillColor = ~pal(Percent), #refers to the created palette above
color = "#b2aeae", #you need to use hex colors
fillOpacity = 0.7, #experiment with different values here ...
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%   #refers to the popup we made back in line 92
addLegend(pal = pal,  #creates a legend
values = income_merged$Percent,
position = "bottomright",
title = "Percent of Households<br>above $200k",
labFormat = labelFormat(suffix = "%"))
map
library(acs)
library(stringr)
library(tigris)
library(dplyr)
library(ggplot2)
library(leaflet)
geo<-geo.make(state=c("VA"), county=c(540), tract="*")
income<-acs.fetch(endyear = 2015, span = 5, geography = geo, table.number = "B19001", col.names = "pretty")
library(acs)
library(stringr)
library(tigris)
library(dplyr)
library(ggplot2)
library(leaflet)
geo<-geo.make(state=c("VA"), county=c(540), tract="*")
income<-acs.fetch(endyear = 2015, span = 5, geography = geo, table.number = "B19001", col.names = "pretty")
names(attributes(income))
attr(income, "acs.colnames")
income_df <- data.frame(paste0(str_pad(income@geography$state, 2, "left", pad="0"), #pads zeros, to the "left", 2 total
str_pad(income@geography$county, 3, "left", pad="0"),
str_pad(income@geography$tract, 6, "left", pad="0")),
income@estimate[,c("B19001. Household Income in the Past 12 Months (in 2015 Inflation-Adjusted Dollars): Total:","B19001. Household Income in the Past 12 Months (in 2015 Inflation-Adjusted Dollars): $200,000 or more")],
stringsAsFactors = FALSE)
rownames(income_df)<-1:nrow(income_df)  #sets the row names to 1,2,3......,n
names(income_df)<-c("GEOID", "Total", "Over_200")  #sets the column names
income_df$Percent <- 100*(income_df$Over_200/income_df$Total)  #creates a new variable
tra cts <- tracts(state = 'VA', county = "540", cb=TRUE)
tracts <- tracts(state = 'VA', county = "540", cb=TRUE)
income_merged<- geo_join(tracts, income_df, "GEOID", "GEOID") #merges the acs data and spatial boundary data by `GEOID`
income_merged <- income_merged[income_merged$ALAND>0,] #filter out observations where the land area is 0 (uses similar notation to line 63)
popup <- paste0("GEOID: ", income_merged$GEOID, "<br>", "Percent of Households above $200k: ", round(income_merged$Percent,2))
pal <- colorNumeric(
palette = "YlGnBu",
domain = income_merged$Percent
)
map<-leaflet() %>% #this is a pipe operator - saves space by putting the previous element into the first slot of the next argument
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = income_merged, #use the name of the final merged data frame
fillColor = ~pal(Percent), #refers to the created palette above
color = "#b2aeae", #you need to use hex colors
fillOpacity = 0.7, #experiment with different values here ...
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%   #refers to the popup we made back in line 92
addLegend(pal = pal,  #creates a legend
values = income_merged$Percent,
position = "bottomright",
title = "Percent of Households<br>above $200k",
labFormat = labelFormat(suffix = "%"))
map
geo<-geo.make(state=c("VA"), county=c(540), tract="*")
income<-acs.fetch(endyear = 2015, span = 5, geography = geo, table.number = "B19001", col.names = "pretty")
names(attributes(income))
attr(income, "acs.colnames")
income_df <- data.frame(paste0(str_pad(income@geography$state, 2, "left", pad="0"), #pads zeros, to the "left", 2 total
str_pad(income@geography$county, 3, "left", pad="0"),
str_pad(income@geography$tract, 6, "left", pad="0")),
income@estimate[,c("B19001. Household Income in the Past 12 Months (in 2015 Inflation-Adjusted Dollars): Total:","B19001. Household Income in the Past 12 Months (in 2015 Inflation-Adjusted Dollars): $200,000 or more")],
stringsAsFactors = FALSE)
View(income_df)
rownames(income_df)<-1:nrow(income_df)  #sets the row names to 1,2,3......,n
names(income_df)<-c("GEOID", "Total", "Over_200")  #sets the column names
income_df$Percent <- 100*(income_df$Over_200/income_df$Total)  #creates a new variable
View(income_df)
tracts <- tracts(state = 'VA', county = "540", cb=TRUE)
library(tigris)
tracts <- tracts(state = 'VA', county = "540", cb=TRUE)
income_merged<- geo_join(tracts, income_df, "GEOID", "GEOID") #merges the acs data and spatial boundary data by `GEOID`
income_merged <- income_merged[income_merged$ALAND>0,] #filter out observations where the land area is 0 (uses similar notation to line 63)
popup <- paste0("GEOID: ", income_merged$GEOID, "<br>", "Percent of Households above $200k: ", round(income_merged$Percent,2))
pal <- colorNumeric(
palette = "YlGnBu",
domain = income_merged$Percent
)
library(leaflet)
pal <- colorNumeric(
palette = "YlGnBu",
domain = income_merged$Percent
)
map <- leaflet() %>% #this %>% is a "pipe operator" - saves space by putting the previous element into the first slot of the next argument
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = income_merged, #use the name of the final merged data frame
fillColor = ~pal(Percent), #refers to the created palette above
color = "#b2aeae", #you need to use hex colors
fillOpacity = 0.7, #experiment with different values here ...
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%   #refers to the popup we made back in line 92
addLegend(pal = pal,  #creates a legend
values = income_merged$Percent,
position = "bottomright",
title = "Percent of Households<br>above $200k",
labFormat = labelFormat(suffix = "%"))
map
entropy <- function(pos,neg){
return(-pos*log2(pos)-neg*log2(neg))
}
ig <- function(pos,neg,n,v1,v2,v1_pos,v1_neg,v2_pos,v2_neg){
return(entropy(pos/n,neg/n) - [v1/n*entropy(v1_pos/v1,v1_neg/v1)+v2/n*entropy(v2_pos/v2,v2_neg)/v2])
}
entropy <- function(pos,neg){
return(-pos*log2(pos)-neg*log2(neg))
}
ig <- function(pos,neg,n,v1,v2,v1_pos,v1_neg,v2_pos,v2_neg){
return(entropy(pos/n,neg/n) - (v1/n*entropy(v1_pos/v1,v1_neg/v1)+v2/n*entropy(v2_pos/v2,v2_neg)/v2))
}
ig(5,6,11,3,8,3,0,2,6)
entropy <- function(pos,neg){
if (pos == 0 && neg != 0){
return(-neg*log2(neg))
}
else if(neg==0 && pos !=0){
return(-pos*log2(pos))
}
else if(neg ==0 && pos ==0){
return(0)
}
else{
return(-pos*log2(pos)-neg*log2(neg))
}
}
ig <- function(pos,neg,n,v1,v2,v1_pos,v1_neg,v2_pos,v2_neg){
return(entropy(pos/n,neg/n) - (v1/n*entropy(v1_pos/v1,v1_neg/v1)+v2/n*entropy(v2_pos/v2,v2_neg)/v2))
}
ig(5,6,11,3,8,3,0,2,6)
ig(5,6,11,3,8,2,1,3,5)
ig(9,5,14,8,6,6,2,3,3)
ig <- function(pos,neg,n,v1,v2,v1_pos,v1_neg,v2_pos,v2_neg){
return(entropy((pos/n),(neg/n)) - ((v1/n)*entropy((v1_pos/v1),(v1_neg/v1))+(v2/n)*entropy((v2_pos/v2),(v2_neg/v2))))
}
ig(9,5,14,8,6,6,2,3,3)
# Final Data Viz Project
# DMV Capstone Data
# Tyler Hutcherson
# Binning
library(dplyr)
library(purrr)
library(readr)
setwd("~/Desktop/Data_Science/Spring/DataViz/final_visualization/project_data")
df <- read.csv("crashdata.csv")
# WeatherConditionID, LightConditionID, IntersectionTypeID, Alcohol, TypeOfCollisionID, RoadwayDefectID
# Weather Condition ID vs Light Condition ID
temp <- group_by(df,WeatherConditionID,LightConditionID) %>% summarize(n())
output <- data.frame(matrix(NA, nrow = length(levels(df$WeatherConditionID)), ncol = length(levels(df$LightConditionID))))
for(i in 1:length(levels(df$WeatherConditionID))){
for(j in 1:length(levels(df$LightConditionID))){
output[i,j] <- temp[temp$WeatherConditionID == levels(temp$WeatherConditionID)[i] & temp$LightConditionID == levels(temp$LightConditionID)[j],3] %>%
unlist()
}
}
d_WeatherConditionID_LightConditionID_nonfatal <- output
row.names(d_WeatherConditionID_LightConditionID_nonfatal) <- levels(df$WeatherConditionID)
names(d_WeatherConditionID_LightConditionID_nonfatal) <- levels(df$LightConditionID)
# Weather Condition ID vs Intersection Type ID
temp <- group_by(df,WeatherConditionID,IntersectionTypeID) %>% summarize(n())
output <- data.frame(matrix(NA, nrow = length(levels(df$WeatherConditionID)), ncol = length(levels(df$IntersectionTypeID))))
for(i in 1:length(levels(df$WeatherConditionID))){
for(j in 1:length(levels(df$IntersectionTypeID))){
output[i,j] <- temp[temp$WeatherConditionID == levels(temp$WeatherConditionID)[i] & temp$IntersectionTypeID == levels(temp$IntersectionTypeID)[j],3] %>%
unlist()
}
}
d_WeatherConditionID_IntersectionTypeID_nonfatal <- output
row.names(d_WeatherConditionID_IntersectionTypeID_nonfatal) <- levels(df$WeatherConditionID)
names(d_WeatherConditionID_IntersectionTypeID_nonfatal) <- levels(df$IntersectionTypeID)
# Weather Condition ID vs Alcohol
temp <- group_by(df,WeatherConditionID,Alcohol) %>% summarize(n())
output <- data.frame(matrix(NA, nrow = length(levels(df$WeatherConditionID)), ncol = length(levels(df$Alcohol))))
for(i in 1:length(levels(df$WeatherConditionID))){
for(j in 1:length(levels(df$Alcohol))){
output[i,j] <- temp[temp$WeatherConditionID == levels(temp$WeatherConditionID)[i] & temp$Alcohol == levels(temp$Alcohol)[j],3] %>%
unlist()
}
}
d_WeatherConditionID_Alcohol_nonfatal <- output
row.names(d_WeatherConditionID_Alcohol_nonfatal) <- levels(df$WeatherConditionID)
names(d_WeatherConditionID_Alcohol_nonfatal) <- levels(df$Alcohol)
######################################################
# TypeOfCollisionID vs Light Condition ID
temp <- group_by(df,TypeOfCollisionId,LightConditionID) %>% summarize(n())
output <- data.frame(matrix(NA, nrow = length(levels(df$TypeOfCollisionId)), ncol = length(levels(df$LightConditionID))))
for(i in 1:length(levels(df$TypeOfCollisionId))){
for(j in 1:length(levels(df$LightConditionID))){
output[i,j] <- temp[temp$TypeOfCollisionId == levels(temp$TypeOfCollisionId)[i] & temp$LightConditionID == levels(temp$LightConditionID)[j],3] %>%
unlist()
}
}
d_TypeOfCollisionId_LightConditionID_nonfatal <- output
row.names(d_TypeOfCollisionId_LightConditionID_nonfatal) <- levels(df$TypeOfCollisionId)
names(d_TypeOfCollisionId_LightConditionID_nonfatal) <- levels(df$LightConditionID)
# TypeOfCollisionID vs Intersection Type ID
temp <- group_by(df,TypeOfCollisionId,IntersectionTypeID) %>% summarize(n())
output <- data.frame(matrix(NA, nrow = length(levels(df$TypeOfCollisionId)), ncol = length(levels(df$IntersectionTypeID))))
for(i in 1:length(levels(df$TypeOfCollisionId))){
for(j in 1:length(levels(df$IntersectionTypeID))){
output[i,j] <- temp[temp$TypeOfCollisionId == levels(temp$TypeOfCollisionId)[i] & temp$IntersectionTypeID == levels(temp$IntersectionTypeID)[j],3] %>%
unlist()
}
}
d_TypeOfCollisionId_IntersectionTypeID_nonfatal <- output
row.names(d_TypeOfCollisionId_IntersectionTypeID_nonfatal) <- levels(df$TypeOfCollisionId)
names(d_TypeOfCollisionId_IntersectionTypeID_nonfatal) <- levels(df$IntersectionTypeID)
# TypeOfCollisionID vs Alcohol
temp <- group_by(df,TypeOfCollisionId,Alcohol) %>% summarize(n())
output <- data.frame(matrix(NA, nrow = length(levels(df$TypeOfCollisionId)), ncol = length(levels(df$Alcohol))))
for(i in 1:length(levels(df$TypeOfCollisionId))){
for(j in 1:length(levels(df$Alcohol))){
output[i,j] <- temp[temp$TypeOfCollisionId == levels(temp$TypeOfCollisionId)[i] & temp$Alcohol == levels(temp$Alcohol)[j],3] %>%
unlist()
}
}
d_TypeOfCollisionId_Alcohol_nonfatal <- output
row.names(d_TypeOfCollisionId_Alcohol_nonfatal) <- levels(df$TypeOfCollisionId)
names(d_TypeOfCollisionId_Alcohol_nonfatal) <- levels(df$Alcohol)
########################################################################################
# RoadwayDefectID vs Light Condition ID
temp <- group_by(df,RoadwayDefectID,LightConditionID) %>% summarize(n())
output <- data.frame(matrix(NA, nrow = length(levels(df$RoadwayDefectID)), ncol = length(levels(df$LightConditionID))))
for(i in 1:length(levels(df$RoadwayDefectID))){
for(j in 1:length(levels(df$LightConditionID))){
output[i,j] <- temp[temp$RoadwayDefectID == levels(temp$RoadwayDefectID)[i] & temp$LightConditionID == levels(temp$LightConditionID)[j],3] %>%
unlist()
}
}
d_RoadwayDefectID_LightConditionID_nonfatal <- output
row.names(d_RoadwayDefectID_LightConditionID_nonfatal) <- levels(df$RoadwayDefectID)
names(d_RoadwayDefectID_LightConditionID_nonfatal) <- levels(df$LightConditionID)
# RoadwayDefectID vs Intersection Type ID
temp <- group_by(df,RoadwayDefectID,IntersectionTypeID) %>% summarize(n())
output <- data.frame(matrix(NA, nrow = length(levels(df$RoadwayDefectID)), ncol = length(levels(df$IntersectionTypeID))))
for(i in 1:length(levels(df$RoadwayDefectID))){
for(j in 1:length(levels(df$IntersectionTypeID))){
output[i,j] <- temp[temp$RoadwayDefectID == levels(temp$RoadwayDefectID)[i] & temp$IntersectionTypeID == levels(temp$IntersectionTypeID)[j],3] %>%
unlist()
}
}
d_RoadwayDefectID_IntersectionTypeID_nonfatal <- output
row.names(d_RoadwayDefectID_IntersectionTypeID_nonfatal) <- levels(df$RoadwayDefectID)
names(d_RoadwayDefectID_IntersectionTypeID_nonfatal) <- levels(df$IntersectionTypeID)
# RoadwayDefectID vs Alcohol
temp <- group_by(df,RoadwayDefectID,Alcohol) %>% summarize(n())
output <- data.frame(matrix(NA, nrow = length(levels(df$RoadwayDefectID)), ncol = length(levels(df$Alcohol))))
for(i in 1:length(levels(df$RoadwayDefectID))){
for(j in 1:length(levels(df$Alcohol))){
output[i,j] <- temp[temp$RoadwayDefectID == levels(temp$RoadwayDefectID)[i] & temp$Alcohol == levels(temp$Alcohol)[j],3] %>%
unlist()
}
}
d_RoadwayDefectID_Alcohol_nonfatal <- output
row.names(d_RoadwayDefectID_Alcohol_nonfatal) <- levels(df$RoadwayDefectID)
names(d_RoadwayDefectID_Alcohol_nonfatal) <- levels(df$Alcohol)
##################################################################
# write out csv files
write.csv(d_WeatherConditionID_Alcohol_nonfatal, "WeatherConditionID_Alcohol_nonfatal.csv")
write.csv(d_WeatherConditionID_IntersectionTypeID_nonfatal, "WeatherConditionID_IntersectionTypeID_nonfatal.csv")
write.csv(d_WeatherConditionID_LightConditionID_nonfatal, "WeatherConditionID_LightConditionID_nonfatal.csv")
write.csv(d_TypeOfCollisionId_Alcohol_nonfatal, "TypeOfCollisionId_Alcohol_nonfatal.csv")
write.csv(d_TypeOfCollisionId_IntersectionTypeID_nonfatal, "TypeOfCollisionId_IntersectionTypeID_nonfatal.csv")
write.csv(d_TypeOfCollisionId_LightConditionID_nonfatal, "TypeOfCollisionId_LightConditionID_nonfatal.csv")
write.csv(d_RoadwayDefectID_Alcohol_nonfatal, "RoadwayDefectID_Alcohol_nonfatal.csv")
write.csv(d_RoadwayDefectID_IntersectionTypeID_nonfatal, "RoadwayDefectID_IntersectionTypeID_nonfatal.csv")
write.csv(d_RoadwayDefectID_LightConditionID_nonfatal, "RoadwayDefectID_LightConditionID_nonfatal.csv")
